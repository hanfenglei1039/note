{
  "name": "async",
  "description": "Higher-order functions and common patterns for asynchronous code",
  "version": "2.6.0",
  "main": "dist/async.js",
  "author": {
    "name": "Caolan McMahon"
  },
  "homepage": "https://caolan.github.io/async/",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/caolan/async.git"
  },
  "bugs": {
    "url": "https://github.com/caolan/async/issues"
  },
  "keywords": [
    "async",
    "callback",
    "module",
    "utility"
  ],
  "dependencies": {
    "lodash": "^4.14.0",
    "lodash-es": "^4.14.0"
  },
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-core": "^6.24.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-istanbul": "^2.0.1",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.3.16",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-es2017": "^6.22.0",
    "babelify": "^7.2.0",
    "benchmark": "^2.1.1",
    "bluebird": "^3.4.6",
    "chai": "^3.1.0",
    "cheerio": "^0.22.0",
    "coveralls": "^2.11.2",
    "es6-promise": "^2.3.0",
    "eslint": "^2.13.1",
    "fs-extra": "^0.26.7",
    "gh-pages-deploy": "^0.4.2",
    "jsdoc": "^3.4.0",
    "karma": "^1.3.0",
    "karma-browserify": "^5.1.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.2.0",
    "karma-mocha-reporter": "^2.2.0",
    "mocha": "^3.1.2",
    "native-promise-only": "^0.8.0-a",
    "nyc": "^7.0.0",
    "recursive-readdir": "^1.3.0",
    "rimraf": "^2.5.0",
    "rollup": "^0.36.3",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-npm": "^2.0.0",
    "rsvp": "^3.0.18",
    "semver": "^4.3.6",
    "uglify-js": "~2.7.3",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "watchify": "^3.7.0",
    "yargs": "~3.9.1"
  },
  "scripts": {
    "coverage": "nyc npm run mocha-node-test -- --grep @nycinvalid --invert",
    "coveralls": "npm run coverage && nyc report --reporter=text-lcov | coveralls",
    "jsdoc": "jsdoc -c ./support/jsdoc/jsdoc.json && node support/jsdoc/jsdoc-fix-html.js",
    "lint": "eslint lib/ mocha_test/ perf/memory.js perf/suites.js perf/benchmark.js support/build/ support/*.js karma.conf.js",
    "mocha-browser-test": "karma start",
    "mocha-node-test": "mocha mocha_test/ --compilers js:babel-core/register",
    "mocha-test": "npm run mocha-node-test && npm run mocha-browser-test",
    "test": "npm run lint && npm run mocha-node-test"
  },
  "license": "MIT",
  "gh-pages-deploy": {
    "staticpath": "docs"
  },
  "nyc": {
    "exclude": [
      "mocha_test"
    ]
  },
  "readme": "![Async Logo](https://raw.githubusercontent.com/caolan/async/master/logo/async-logo_readme.jpg)\r\n\r\n[![Build Status via Travis CI](https://travis-ci.org/caolan/async.svg?branch=master)](https://travis-ci.org/caolan/async)\r\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\r\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\r\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![libhive - Open source examples](https://www.libhive.com/providers/npm/packages/async/examples/badge.svg)](https://www.libhive.com/providers/npm/packages/async)\r\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded)](https://www.jsdelivr.com/package/npm/async)\r\n\r\n\r\nAsync is a utility module which provides straight-forward, powerful functions for working with [asynchronous JavaScript](http://caolan.github.io/async/global.html). Although originally designed for use with [Node.js](https://nodejs.org/) and installable via `npm install --save async`, it can also be used directly in the browser.\r\n\r\nFor Documentation, visit <https://caolan.github.io/async/>\r\n\r\n*For Async v1.5.x documentation, go [HERE](https://github.com/caolan/async/blob/v1.5.2/README.md)*\r\n\r\n\r\n```javascript\r\n// for use with Node-style callbacks...\r\nvar obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\nvar configs = {};\r\n\r\nasync.forEachOf(obj, (value, key, callback) => {\r\n    fs.readFile(__dirname + value, \"utf8\", (err, data) => {\r\n        if (err) return callback(err);\r\n        try {\r\n            configs[key] = JSON.parse(data);\r\n        } catch (e) {\r\n            return callback(e);\r\n        }\r\n        callback();\r\n    });\r\n}, err => {\r\n    if (err) console.error(err.message);\r\n    // configs is now a map of JSON data\r\n    doSomethingWith(configs);\r\n});\r\n```\r\n\r\n```javascript\r\n// ...or ES2017 async functions\r\nasync.mapLimit(urls, 5, async function(url) {\r\n    const response = await fetch(url)\r\n    return response.body\r\n}, (err, results) => {\r\n    if (err) throw err\r\n    // results is now an array of the response bodies\r\n    console.log(results)\r\n})\r\n```\r\n",
  "readmeFilename": "README.md",
  "gitHead": "ba6ed320e350f8b2eae4eb9683302ddac0ddf66f",
  "_id": "async@2.6.0",
  "_shasum": "283ad81b48421c9c430a827aca1f602d645d2aff",
  "_from": "hanfengleiLocalDir\\async",
  "_resolved": "file:hanfengleiLocalDir\\async"
}
